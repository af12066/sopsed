#!/usr/bin/env bash

set -ueo pipefail

# Redirect fds so that output to &3 is real stdout, and &1 goes to stderr
# instead; this prevents accidentially intermixing with what the original command sends to
# stdout.
exec 3>&1
exec 1>&2

# colors
RED='\033[0;31m'
#GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NOC='\033[0m'

ENC_SUFFIX=".sops"
COUNT_FILES_FAILED=0
COUNT_FILES=0

CURRENT_COMMAND="${1:-}"

case "$0" in
    sops-exec)
        WRAPPER_PATH="$(command -v sops-exec)"
        ;;
    *)
        WRAPPER_PATH="$0"
        ;;
esac

ORIG_CMD="$1"

decrypt_files() {
  if [[ "$file" =~ $MATCH_FILES_ARGS ]];
  then
    if [ -f "$file" ];
      then
          echo -e "${YELLOW}>>>>>>${NOC} ${BLUE}Decrypt${NOC}"
          local out
          out=${file%.sops}
          sops --decrypt "$file" > $out
          (( ++COUNT_FILES ))
      else
          (( ++COUNT_FILES_FAILED ))
          return
    fi
  fi
}

function cleanup {
  echo -e "${YELLOW}>>>>>>${NOC} ${BLUE}Cleanup${NOC}"
  for file in "${@}";
  do
    local t
    t=${file%.sops}
    if [ -e $t ]; then
      rm $t
    fi
  done
}

function orig_cmd {
    echo ""
    $(echo "${ORIG_CMD} $*") >&3
    local status=$?
    if [ "$status" -ne 0 ]; then
      echo ""
      cleanup "$@"
      exit 1
    else
      echo ""
      cleanup "$@"
      exit 0
    fi
}

files=$(find . -name '*.sops')

for file in "$@"
  do
    decrypt_files "$file"
  done
;;

if [ "$COUNT_FILES" -eq 0 ] && [ "$COUNT_FILES_FAILED" -gt 0 ];
then
    echo -e "${RED}Error no secrets found. No secret files in chart or secrets files defined${NOC}"
    exit 1
fi

# Run the original command
orig_cmd "$@"
